@import '../../styles/common';

$min-height: control-height();
$vertical-padding: ($min-height - line-height(body) - rem(2px)) / 2;
$slim-min-height: rem(30px);
$slim-vertical-padding: ($slim-min-height - line-height(body) - rem(2px)) / 2;
$large-min-height: rem(44px);
$large-vertical-padding: ($large-min-height - line-height(body) - rem(2px)) / 2;
$spinner-size: rem(20px);

$stacking-order: (
  segment: 10,
  focused: 20,
);

.Button {
  @include button-base;

  &.connectedDisclosure {
    z-index: z-index(segment, $stacking-order);
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;

    &::after {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    &:focus {
      z-index: z-index(focused, $stacking-order);
    }
  }
}

.Content {
  @include text-style-button;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 1px;
  min-height: 1px;
}

.textAlignLeft {
  justify-content: flex-start;
  text-align: left;
}

.textAlignCenter {
  justify-content: center;
  text-align: center;
}

.textAlignRight {
  justify-content: flex-end;
  text-align: right;
}

.stretchContent:not(.loading) > .Content {
  justify-content: space-between;
  width: 100%;
}

.Icon {
  transition: color duration() easing();

  // This compensates for the typical icon used in buttons being
  // inset within its bounding box.
  margin-left: -(spacing(extra-tight));

  &:last-child {
    // This compensates for the disclosure icon, which is substantially
    // inset within the viewbox (and makes it look like there is too much
    // spacing on the right of the button)
    margin-right: -(spacing(tight));
    margin-left: spacing(extra-tight);
  }

  + *:not(.Icon) {
    margin-left: spacing(extra-tight);
  }
}

.Hidden {
  visibility: hidden;
}

.Spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -($spinner-size / 2);
  margin-left: -($spinner-size / 2);
}

.primary {
  --p-button-color: var(--p-action-primary);
  --p-button-text: var(--p-text-on-primary);
  --p-button-color-hover: var(--p-action-primary-hovered);
  --p-button-color-active: var(--p-action-primary-pressed);
  --p-button-color-depressed: var(--p-action-primary-depressed);
  @include button-filled;
  @include recolor-icon(var(--p-icon-on-primary));
}

.destructive {
  --p-button-color: var(--p-action-critical);
  --p-button-text: var(--p-text-on-critical);
  --p-button-color-hover: var(--p-action-critical-hovered);
  --p-button-color-active: var(--p-action-critical-pressed);
  --p-button-color-depressed: var(--p-action-critical-depressed);
  @include button-filled;
  @include recolor-icon(var(--p-icon-on-critical));
}

.outline {
  @include button-outline;
}

.destructive.outline {
  @include button-outline;
}

.disabled {
  cursor: default;
  pointer-events: none;
}

@keyframes loading {
  to {
    transform: rotate(360deg);
  }
}

.loading {
  position: relative;
  transition: border-color duration() easing();

  // stylelint-disable-next-line selector-max-class
  &,
  &:hover,
  &.disabled {
    color: transparent;
  }

  &.disabled svg {
    fill: var(--p-icon-subdued);
  }
}

// The way the designs work, we need to do lots of reaching down to
// target the content in pseudo-selectors, so we need higher specificity
// in this case.
// stylelint-disable selector-max-specificity

.plain {
  // redeclaring these styles here for specificity
  @include recolor-icon(var(--p-interactive));
  color: var(--p-interactive);
  margin: (-1 * $vertical-padding) rem(-8px);
  padding-left: spacing(tight);
  padding-right: spacing(tight);
  background: transparent;
  border: 0;

  &.pressed,
  &:focus {
    @include high-contrast-button-outline(none);
  }

  > .Content {
    @include focus-ring;
  }

  &.fullWidth {
    margin-left: 0;
    margin-right: 0;
  }

  &.destructive {
    @include recolor-icon(color('red', 'dark'));
    color: var(--p-action-critical, color('red', 'dark'));
    &:focus,
    &:active {
      color: var(--p-action-critical-pressed, color('red', 'darker'));
    }
  }

  &.disabled {
    background: none;
  }

  &.sizeSlim {
    margin-top: (-1 * $slim-vertical-padding);
    margin-bottom: (-1 * $slim-vertical-padding);
  }

  &.sizeLarge {
    margin: (-1 * $large-vertical-padding) (-1 * spacing(loose));
  }
  &.iconOnly {
    @include recolor-icon(color('ink', 'lighter'));
    margin: -0.5 * ($min-height - icon-size());

    &:focus,
    &:active {
      @include recolor-icon(color('ink', 'lighter'));
      background: plain-button-background();
    }

    &:hover,
    &:active {
      @include recolor-icon(color('ink'));
    }

    // stylelint-disable-next-line selector-max-class
    > .Content::after {
      display: none;
    }

    // stylelint-disable-next-line selector-max-class
    &.disabled {
      @include recolor-icon(color('sky', 'dark'));
    }
  }

  .Icon {
    margin-left: 0;
    margin-right: 0;
  }

  // stylelint-disable selector-max-class
  &.newDesignLanguage {
    > .Content {
      font-weight: 400;
      @include focus-ring;
    }

    &:hover {
      @include recolor-icon(var(--p-interactive-hovered));
      color: var(--p-interactive-hovered);
    }

    &:focus {
      @include recolor-icon(var(--p-interactive));
      color: var(--p-interactive);
      @include no-focus-ring;
    }

    &:active {
      @include recolor-icon(var(--p-interactive-pressed));
      color: var(--p-interactive-pressed);
    }

    &:focus:not(:active) {
      > .Content {
        @include focus-ring($style: 'focused');
      }
    }

    &.pressed {
      background: none;
      @include recolor-icon(var(--p-interactive-pressed));
      color: var(--p-interactive-pressed);
    }

    &:focus:not(.iconOnly) > .Content {
      background: none;
    }

    &.destructive {
      @include recolor-icon(var(--p-interactive-critical));
      color: var(--p-interactive-critical);

      &:hover {
        color: var(--p-interactive-critical-hovered);
      }

      &:active {
        color: var(--p-interactive-critical-pressed);
      }

      &.pressed {
        color: var(--p-interactive-critical-pressed);
        background: transparent;
      }

      &.disabled {
        color: var(--p-interactive-critical-disabled);
      }
    }

    &.disabled {
      color: var(--p-text-disabled);
      background: none;
    }

    &.iconOnly {
      @include recolor-icon(var(--p-icon));

      &:hover {
        @include recolor-icon(var(--p-icon-hovered));
      }

      &:focus {
        @include recolor-icon(var(--p-icon));
      }

      &:active {
        @include recolor-icon(var(--p-icon-pressed));
      }

      &.disabled {
        @include recolor-icon(var(--p-icon-disabled));
      }
    }

    &.destructive.iconOnly {
      @include recolor-icon(var(--p-action-critical));

      &:hover {
        @include recolor-icon(var(--p-action-critical-hovered));
      }

      &:focus {
        @include recolor-icon(var(--p-action-critical));
      }

      &:active {
        @include recolor-icon(var(--p-action-critical-pressed));
      }

      &.disabled {
        @include recolor-icon(var(--p-action-critical-disabled));
      }
    }
  }
  // stylelint-enable selector-max-class
}

// stylelint-enable selector-max-specificity

.sizeSlim {
  min-height: $slim-min-height;
  padding: $slim-vertical-padding spacing(base-tight);

  &.newDesignLanguage {
    // Local override for slim button height and padding
    $slim-min-height: rem(28px);
    $slim-vertical-padding: ($slim-min-height - line-height(body) - rem(2px)) /
      2;
    min-height: $slim-min-height;
    padding: $slim-vertical-padding spacing(base-tight);
  }
}

.sizeLarge {
  min-height: $large-min-height;
  min-width: $large-min-height;
  padding: $large-vertical-padding rem(24px);

  .Content {
    @include text-style-button-large;
  }
}

.fullWidth {
  @include button-full-width;
}

.iconOnly {
  padding-left: spacing(tight);
  padding-right: spacing(tight);

  &.sizeLarge {
    padding-left: spacing(base-tight);
    padding-right: spacing(base-tight);
  }

  .Icon:first-child {
    margin-left: 0;
  }

  .Icon:last-child {
    margin-right: rem(-4px);
  }
  // stylelint-disable selector-max-class, selector-max-combinators, selector-max-specificity
  .Icon + .Icon:last-child {
    margin-left: 0;
  }
  // stylelint-enable selector-max-class, selector-max-combinators, selector-max-specificity

  .Icon:only-child {
    margin-right: 0;
  }
}

// stylelint-disable selector-max-specificity
.monochrome {
  &.outline,
  &.plain {
    @include recolor-icon(currentColor);
    color: currentColor;

    &:hover,
    &:focus,
    &:active {
      @include recolor-icon(currentColor);
      color: currentColor;
    }

    // stylelint-disable selector-max-class
    &.disabled {
      color: currentColor;
      @include recolor-icon(currentColor);
      opacity: 0.4;
    }

    &.iconOnly {
      @include recolor-icon(currentColor);

      &:focus,
      &:active {
        @include recolor-icon(currentColor);
      }

      &.disabled {
        @include recolor-icon(currentColor);
      }
    }
    // stylelint-enable selector-max-class
  }

  &.plain {
    // stylelint-disable-next-line selector-max-class
    &.newDesignLanguage {
      color: currentColor;
    }

    // stylelint-disable selector-max-class, max-nesting-depth
    .Text {
      text-decoration: underline;
    }
    // stylelint-enable selector-max-class, max-nesting-depth
  }

  &.outline {
    position: relative;
    border-color: currentColor;
    // stylelint-disable selector-max-class

    &::before {
      content: '';
      transition: opacity duration() easing();
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: currentColor;
      opacity: 0;
      z-index: 0;
    }

    &.pressed {
      background: transparent;
      box-shadow: none;

      &::before {
        opacity: 0.05;
      }
    }

    &:hover,
    &:focus,
    &:active {
      background-color: transparent;
      border-color: currentColor;
      &::before {
        opacity: 0.07;
      }
    }

    &:focus {
      box-shadow: 0 0 0 1px currentColor;
    }

    &.newDesignLanguage {
      @include focus-ring($border-width: border-width('base'));
      border-color: currentColor;
      box-shadow: 0 0 0 border-width('base') currentColor;

      &:focus {
        @include focus-ring($style: 'focused');
      }

      &:active::after {
        box-shadow: none;
      }

      &:hover,
      &:active {
        // stylelint-disable-next-line max-nesting-depth
        &::before {
          opacity: 0.05;
        }
      }

      &.pressed {
        color: currentColor;

        // stylelint-disable-next-line max-nesting-depth
        &::before {
          opacity: 0.2;
        }
      }
    }
    // stylelint-enable selector-max-class
  }
}
// stylelint-enable selector-max-specificity

.DisclosureIcon {
  transition-property: transform;
  transition-duration: duration(slow);
  transition-timing-function: easing(out);
}

.DisclosureIconFacingUp {
  transform: rotate(-180deg);
}

.ConnectedDisclosureWrapper {
  display: flex;
}

.ConnectedDisclosure {
  z-index: z-index(segment, $stacking-order);
  margin-left: -(border-width());
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  height: 100%;

  // Because the outline border color has a 40% opacity, the left border appears darker than the rest of the borders because they are layered over one another. Reducing the opacity to zero for the connected disclosure when not focused gives us the expected border color.
  &.outline:not(:focus) {
    border-left-color: rgba(color('ink', 'lighter'), 0);
  }

  &:focus,
  &:active {
    z-index: z-index(focused, $stacking-order);
  }

  &.newDesignLanguage {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;

    // stylelint-disable selector-max-class, selector-max-specificity
    &.primary,
    &.destructive {
      margin-left: rem(1px);

      &.outline {
        margin-left: 0;
        border-left: 0;
      }
    }
    // stylelint-enable selector-max-class, selector-max-specificity

    &::after {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }
}
// stylelint-disable selector-max-combinators, selector-max-compound-selectors, selector-max-specificity
[data-buttongroup-segmented='true'] {
  .Button,
  .Button::after {
    border-radius: 0;
  }
  > :first-child .Button,
  > :first-child .Button::after {
    border-radius: 0;
    border-top-left-radius: var(--p-border-radius-base);
    border-bottom-left-radius: var(--p-border-radius-base);
  }
  > :last-child .Button,
  > :last-child .Button::after {
    border-radius: 0;
    border-top-right-radius: var(--p-border-radius-base);
    border-bottom-right-radius: var(--p-border-radius-base);
  }

  > :last-child:first-child .Button,
  > :last-child:first-child .Button::after {
    border-radius: var(--p-border-radius-base);
  }
}

[data-buttongroup-connected-top='true'] {
  > :first-child .Button,
  > :first-child .Button::after {
    border-top-left-radius: 0;
  }

  > :last-child .Button,
  > :last-child .Button::after {
    border-top-right-radius: 0;
  }
}

[data-buttongroup-full-width='true'] {
  .Button {
    @include button-full-width;
  }
}
// stylelint-enable selector-max-combinators, selector-max-compound-selectors, selector-max-specificity
